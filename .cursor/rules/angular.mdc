---
description: 
globs: *.component.html,*.component.ts
alwaysApply: false
---
### Guidelines for ANGULAR

#### ANGULAR_CODING_STANDARDS

- Use standalone components, directives, and pipes instead of NgModules
- Implement signals for state management instead of traditional RxJS-based approaches
- Use the new inject function instead of constructor injection
- Implement control flow with @if, @for, and @switch instead of *ngIf, *ngFor, etc.
- Use signal type instead of Subject, BehaviorSubject, Observable if possible
- Leverage functional guards and resolvers instead of class-based ones
- Use the new deferrable views for improved loading states
- Implement OnPush change detection strategy for improved performance
- Use TypeScript decorators with explicit visibility modifiers (public, private)
- Leverage Angular CLI for schematics and code generation
- Instead of usung @Input() use new signal-based inputs
- Implement proper lazy loading with loadComponent and loadChildren
- Seaparate componet code, template and styles to dedicated files. Don't create style files if there are no styles.
- Stode styles in .scss files 

### ANGULAR LAZY LOADED MODULES WITH NX LIBRARIES

If APP uses lazy-loaded routed modules, then
in library `src/lib` directory create file `routes.ts` that exports routes from this library
```typescript
export const DASHBOARD_ROUTES: Route[] = [
  {
    path: '',
    pathMatch: 'full',
    component: DashboardComponent
  },
];
```
NX library should encapsulate all code and exports only from `routes.ts` in `indes.ts`

Then in `app.routes.ts` in APP import in this way
```typescript
export const appRoutes: Route[] = [  
  {
    path: 'dashboard',
    loadChildren: () => import('@cpmpany/features/dashboard').then(m => m.DASHBOARD_ROUTES)
  }, 
];
```

Don't create a directory for main feature component. Put it in `src/lid/` directory


#### ANGULAR_MATERIAL

- Create a dedicated module for Angular Material imports to keep the app module clean
- Use theme mixins to customize component styles instead of overriding CSS
- Implement dark mode with the dark theme
- Leverage the CDK (Component Development Kit) for custom component behaviors
- Use Material's form field components with reactive forms for consistent validation UX
- Implement accessibility attributes and ARIA labels for interactive components
- Use the new Material 3 design system updates where available
- Leverage the Angular Material theming system for consistent branding
- Implement proper typography hierarchy using the Material typography system
- Use Angular Material's built-in a11y features like focus indicators and keyboard navigation